-- TELEPORT BYPASS 
 if game:GetService("Players").LocalPlayer.Character.Services:FindFirstChild("Client") then 
     game:GetService("Players").LocalPlayer.Character.Services["Client"].Disabled = true 
 end 
  
 -- VARIABLES 
 local mobs = {} -- MOBS TABLE 
 getgenv().mob = nil -- SELECTED MOB 
  
 -- MOBS 
 for _,v in pairs(game:GetService("Workspace").Monster.Mon:GetChildren()) do -- LOOPS THROUGH ALL MOBS 
     insert = true -- VALUE TO CHECK THE MOB 
     for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE 
     if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT 
 end 
  
local DiscordLib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/discord%20lib.txt")()
local win = DiscordLib:Window("discord library")
local serv = win:Server("Preview", "")
local drops = serv:Channel("Dropdowns")

local drop = drops:Dropdown("Pick me!",mobs , function(y)
getgenv().mob = y
end)
drops:Toggle("Auto Equip",false, function(v)
     getgenv().autofarmmobs = v 
     while wait() do -- INFINITE LOOP 
         if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP 
         if getgenv().mob == nil then -- IF THE MOB ISNT SELECTED 
             game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION 
                 Title = "Error!", -- NOTIFICACTION LABEL 
                 Text = "You havent selected a mob with the dropdown above\nUntoggle this toggle!", -- NOTIFICATION DESCRIPTION / TEXT 
                 Icon = "", -- ICON (NO ICON) 
                 Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn 
             }) 
             getgenv().autofarmmobs = false -- TURN OFF THE AUTO FARM 
             return -- MAKE SURE IT DOESNT EXECUTE ANYTHING UNDER // FULLY TURN OFF THE LOOP 
         end 
         local mob = game:GetService("Workspace").Monster.Mon:FindFirstChild(getgenv().mob) 
         if mob == nil then 
             game.StarterGui:SetCore("SendNotification", { -- SHOW NOTIFIACTION 
                 Title = "Info!", -- NOTIFICACTION LABEL 
                 Text = "There is currently no spawned mobs of this type!\nJust wait until they spawn", -- NOTIFICATION DESCRIPTION / TEXT 
                 Icon = "", -- ICON (NO ICON) 
                 Duration = 2.5 -- DURATION OF THE NOTIFIACTIOn 
             }) 
             while wait() do -- LOOP WHICH REPEATS UNTIL THE UNTIL IS TRUE / DONE 
                 wait() -- WAIT SO WE DONT CRASH 
                 if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP 
                 if game:GetService("Workspace").Monster.Mon:FindFirstChild(getgenv().mob) ~= nil then break; end 
             end -- IF THE MOB IS SPAWNED THEN GO ON WITH THE AUTOFARM 
         else 
             local mob2 = mob 
             while wait() do 
                 mob = game:GetService("Workspace").Monster.Mon:FindFirstChild(getgenv().mob) 
                 if mob ~= mob2 then break; end 
                 if getgenv().autofarmmobs == false then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP 
                 if mob ~= nil then 
                     if mob:FindFirstChild("Humanoid") then 
                         if mob.Humanoid.Health == 0 then wait(0.1) mob:Destroy() break; end -- IF THE MOB IS DEAD THEN JUST DESTROY IT FOR FASTER FARMING 
                     end 
                     if mob:FindFirstChild("HumanoidRootPart") then 
                         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,2) -- TELEPORT TO THE MOB 
                     end 
                 end 
                 wait() -- WAIT SO WE DONT CRASH 
             end 
         end 
     end 
 end) 
 -- UPDATING THE MOBS 
  
 game:GetService("Workspace").Monster.Mon.ChildAdded:Connect(function() -- WHEN MOB SPAWNS 
     for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS 
     -- ADDS THE NEW MOBS 
     for _,v in pairs(game:GetService("Workspace").Monster.Mon:GetChildren()) do -- LOOPS THROUGH ALL MOBS 
         insert = true -- VALUE TO CHECK THE MOB 
         for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE 
         if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT 
     end 
     mobdropdown:Refresh(mobs) 
 end) 
  
 game:GetService("Workspace").Monster.Mon.ChildRemoved:Connect(function() -- WHEN MOB DIES / GETS REMOVED 
     for _,v2 in pairs(mobs) do table.remove(mobs, _) end -- REMOVES ALL THE OLD MOBS 
     -- ADDS THE NEW MOBS 
     for _,v in pairs(game:GetService("Workspace").Monster.Mon:GetChildren()) do -- LOOPS THROUGH ALL MOBS 
         insert = true -- VALUE TO CHECK THE MOB 
         for _,v2 in pairs(mobs) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE 
         if insert then table.insert(mobs, v.Name) end -- IF THE MOB ISNT INSERTED THEN INSERT IT 
     end 
     mobdropdown:Refresh(mobs) 
 end)